#! /usr/bin/env python3
from os import environ
import requests
from bs4 import BeautifulSoup
from sys import argv, exit

class Student:
    #set base year as current year
    base_year = 17
    try:
        proxyDict = {
                    'http_proxy': environ['http_proxy'],
                    'https_proxy': environ['https_proxy'],
                    'ftp_proxy': environ['ftp_proxy']
                }
    except KeyError:
        proxyDict = None

    def __init__(self,num):
        num = str(num)
        if(num[0]=='i'):#iitu
            self.year = num[5:7]
            self.college = "iiitu"
            self.c_id="iiituna"
        else:
            self.year = num[0:2]
            self.college = "nith"
            self.c_id="scheme"

        if(num[2]=='m' or num[2]=='M'):
            self.branch=num[2:4].lower()
            self.branch+=str(num[4])
            self.roll=num[5:7]
        elif(num[0]=='i'):
            self.branch=num[7]
            self.roll=num[8:10]
        else:
            self.branch=num[2]
            self.roll=num[3:5]

        self.rollno = self.year+self.branch+self.roll
        if(num[0]=='i'):
            self.rollno = "iiitu" + self.rollno

        try:
            url = "http://14.139.56.15/"+self.c_id+self.year+"/studentresult/details.asp"
            page = requests.post(url,data={'RollNumber':self.rollno},proxies=Student.proxyDict,verify=False)
            soup = BeautifulSoup(page.text,'lxml')
            self.all_data = soup.find_all(class_='ewTable')
            self.name=self.all_data[0].find_all('tr')[0].find_all('td')[1].text.strip()
            res = self.all_data[-1].find_all('tr')[1].find_all('td')
            self.sgpa = res[0].text.strip().split("=")[1]
            cgpa_ = res[2].text.strip()
            self.points = cgpa_.split("/")[0]
            self.cgpa = cgpa_.split("=")[1]
        except:
            self.name = '-'
            self.sgpa = self.points = self.cgpa = '0'

    def display_result(self):
        out = self.rollno +"\n\t" + self.name + "\n\t" + self.sgpa + "\n\t" +self.points+ "\n\t" + self.cgpa
        return out

flag = 0
if(len(argv)==2):
    roll=argv[1]
    flag = 1
else:
    print("enter ur roll : ",end='')
    roll = str(input())

std = Student(roll)

print(std.display_result())

def sort_sgpa(std):
    return float(std.sgpa)
def sort_cgpa(std):
    return float(std.cgpa)

if(flag==1):
    ans='y'
else:
    print("do you want relult of whole class y or n : ",end='')
    ans = input()
data=[]
if(ans!='y'):
    exit()

temp = roll[:-2]
a,b = 1,90
if(roll[0]=='i'):
    b=40
if(roll[2]=='m'):
    b=65

if(ans=='y'):
    for i in range(a,b):
        roll = temp
        roll += "%02d"%(i)
        std = Student(roll)
        if(std.name!='0'):
            data.append(std)
            print(std.display_result())
            print()
    data.sort(key=sort_sgpa,reverse=True)
    print("sorting by sgpi....\n\n\n")
    rank = 1
    for item in data:
        print(rank,end=" ")
        print(item.display_result())
        print()
        rank +=1

    data.sort(key=sort_cgpa,reverse=True)
    print("sorting by cgpi....\n\n\n")
    rank = 1
    for item in data:
        print(rank,end=" ")
        print(item.display_result())
        print()
        rank +=1

